{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projekter\\\\PortfolioSSG\\\\pages\\\\blog\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport Head from 'next/head';\nimport marked from 'marked';\n\nconst Post = ({\n  htmlString,\n  data\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, data.title)), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(\"article\", {\n    dangerouslySetInnerHTML: {\n      __html: htmlString\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })));\n};\n/**\r\n * This is used to determine the paths during export\r\n */\n\n\nexport const getStaticPaths = async () => {\n  // Get all of the file names from the \"posts\" folder\n  const files = fs.readdirSync('posts');\n  console.log({\n    files\n  });\n  return {\n    // Create a route for each md file\n    paths: files.map(filename => ({\n      params: {\n        // Set the params for each file\n        slug: filename.replace('.md', '') // Set the slug of the file to be the filename without the .md extension\n\n      }\n    })),\n    fallback: false\n  };\n};\n/**\r\n * Used to set the props for the page during export.\r\n * Anything set here will be passed as props to the component during export.\r\n */\n\nexport const getStaticProps = async ({\n  params: {\n    slug\n  }\n}) => {\n  // Get the content of the md file by checking for it using the file name + the .md extension\n  const markdownWithMetadata = fs.readFileSync(path.join('posts', `${slug}.md`)).toString();\n  const {\n    content,\n    data\n  } = matter(markdownWithMetadata);\n  const htmlString = marked(content);\n  return {\n    // Anything passed to the \"props\" object will be passed to the component as props.\n    props: {\n      htmlString,\n      data\n    }\n  };\n};\nexport default Post;","map":{"version":3,"sources":["F:/Projekter/PortfolioSSG/pages/blog/[slug].tsx"],"names":["React","fs","path","matter","Head","marked","Post","htmlString","data","title","__html","getStaticPaths","files","readdirSync","console","log","paths","map","filename","params","slug","replace","fallback","getStaticProps","markdownWithMetadata","readFileSync","join","toString","content","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZC,EAAAA,UADY;AAEZC,EAAAA;AAFY,CAAD,KAGP;AACJ,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACC,KADR,CADF,CADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEH;AAAV,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,CADF;AAYD,CAhBD;AAkBA;;;;;AAGA,OAAO,MAAMI,cAAc,GAAG,YAAY;AAExC;AACA,QAAMC,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAe,OAAf,CAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;AAEA,SAAO;AACL;AACAI,IAAAA,KAAK,EAAEJ,KAAK,CAACK,GAAN,CAAWC,QAAD,KAAuB;AACtCC,MAAAA,MAAM,EAAE;AAAE;AACRC,QAAAA,IAAI,EAAEF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CADA,CAC4B;;AAD5B;AAD8B,KAAvB,CAAV,CAFF;AAOLC,IAAAA,QAAQ,EAAE;AAPL,GAAP;AASD,CAhBM;AAmBP;;;;;AAIA,OAAO,MAAMC,cAAc,GAAG,OAAO;AAAEJ,EAAAA,MAAM,EAAE;AAAEC,IAAAA;AAAF;AAAV,CAAP,KAAgC;AAE5D;AACA,QAAMI,oBAAoB,GAAGvB,EAAE,CAACwB,YAAH,CAAgBvB,IAAI,CAACwB,IAAL,CAAU,OAAV,EAAoB,GAAEN,IAAK,KAA3B,CAAhB,EAAkDO,QAAlD,EAA7B;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWpB,IAAAA;AAAX,MAAoBL,MAAM,CAACqB,oBAAD,CAAhC;AAEA,QAAMjB,UAAkB,GAAGF,MAAM,CAACuB,OAAD,CAAjC;AAEA,SAAO;AACL;AACAC,IAAAA,KAAK,EAAE;AACLtB,MAAAA,UADK;AAELC,MAAAA;AAFK;AAFF,GAAP;AAOD,CAhBM;AAkBP,eAAeF,IAAf","sourcesContent":["import React from 'react';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport Head from 'next/head';\r\nimport marked from 'marked';\r\n\r\nconst Post = ({\r\n  htmlString,\r\n  data\r\n}) => {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>\r\n          {data.title}\r\n        </title>\r\n      </Head>\r\n      <div>\r\n        <article dangerouslySetInnerHTML={{ __html: htmlString }} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * This is used to determine the paths during export\r\n */\r\nexport const getStaticPaths = async () => {\r\n\r\n  // Get all of the file names from the \"posts\" folder\r\n  const files = fs.readdirSync('posts');\r\n\r\n  console.log({ files });\r\n\r\n  return {\r\n    // Create a route for each md file\r\n    paths: files.map((filename: string) => ({\r\n      params: { // Set the params for each file\r\n        slug: filename.replace('.md', '') // Set the slug of the file to be the filename without the .md extension\r\n      }\r\n    })),\r\n    fallback: false\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Used to set the props for the page during export.\r\n * Anything set here will be passed as props to the component during export.\r\n */\r\nexport const getStaticProps = async ({ params: { slug } }) => {\r\n\r\n  // Get the content of the md file by checking for it using the file name + the .md extension\r\n  const markdownWithMetadata = fs.readFileSync(path.join('posts', `${slug}.md`)).toString();\r\n\r\n  const { content, data } = matter(markdownWithMetadata);\r\n\r\n  const htmlString: string = marked(content);\r\n\r\n  return {\r\n    // Anything passed to the \"props\" object will be passed to the component as props.\r\n    props: {\r\n      htmlString,\r\n      data\r\n    }\r\n  }\r\n}\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}